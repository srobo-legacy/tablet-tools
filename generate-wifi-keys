#!/usr/bin/env python3

import json
import yaml
import argparse

## From http://code.activestate.com/recipes/410076-generate-a-human-readable-random-password-nicepass/
## Generate a human readable 'random' password
## password  will be generated in the form 'word'+digits+'word' 
## eg.,nice137pass
## parameters: number of 'characters' , number of 'digits'
## Pradeep Kishore Gowda <pradeep at btbytes.com >
## License : GPL 
## Date : 2005.April.15
## Revision 1.2 
## ChangeLog: 
## 1.1 - fixed typos 
## 1.2 - renamed functions _apart & _npart to a_part & n_part as zope does not allow functions to 
## start with _

def nicepass(alpha=6,numeric=2):
    """
    returns a human-readble password (say rol86din instead of 
    a difficult to remember K8Yn9muL ) 
    """
    import string
    import random
    vowels = ['a','e','i','o','u']
    consonants = [a for a in string.ascii_lowercase if a not in vowels]
    digits = string.digits
    
    ####utility functions
    def a_part(slen):
        ret = ''
        for i in range(slen):                   
            if i%2 ==0:
                randid = random.randint(0,20) #number of consonants
                ret += consonants[randid]
            else:
                randid = random.randint(0,4) #number of vowels
                ret += vowels[randid]
        return ret
    
    def n_part(slen):
        ret = ''
        for i in range(slen):
            randid = random.randint(0,9) #number of digits
            ret += digits[randid]
        return ret
        
    ####        
    fpl = alpha//2               
    if alpha % 2 :
        fpl = int(alpha/2) + 1                                  
    lpl = alpha - fpl   
    
    start = a_part(fpl)
    mid = n_part(numeric)
    end = a_part(lpl)
    
    return "%s%s%s" % (start,mid,end)


def get_tla_list(teams_json_file):
    json_f = open(teams_json_file)
    json_data = json_f.read()
    d = json.loads(json_data)
    json_f.close()
    return d.keys()


def make_yaml_file(teams_list, output_file, ps=8, pi=2):
    out = open(output_file, 'w')
    d = {}
    for tla in teams_list:
        tla = tla.upper()
        d[tla] = nicepass(ps, pi)
    out.write(yaml.dump(d, default_flow_style=False))
    out.close()


parser = argparse.ArgumentParser(description='Create yaml files with wifi information, from the teams.json file.')
parser.add_argument('-o', '--output', help='File to output to.', default='out.yaml', required=False)
parser.add_argument('teams', help='teams.json file.')
parser.add_argument('-ps', '--password-str', help='Number of string characters in the passwords.', type=int, default=8, required=False)
parser.add_argument('-pi', '--password-int', help='Number of digit character in the passwords.', type=int, default=2, required=False)
args = parser.parse_args()


def main(args):
    if not args.output.endswith('.yaml'):
        args.output = '{}.yaml'.format(args.output)
    tla_list = get_tla_list(args.teams)
    make_yaml_file(tla_list, args.output, ps=args.password_str, pi=args.password_int)


if __name__ == '__main__':
    main(args)
